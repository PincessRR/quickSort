package assignment2;

import java.util.Stack;

public class quickSort {
	
	private static int[] array;
	private int length;
	private static int compTime;
	//private Stack<Integer> partition = new Stack<Integer>();
	
	public quickSort(int[] array){
		this.array = array;
		length = array.length;
	}
	
/*	public void quicksort(){
		
		int length = array.length;
		
		int leftmid = quicksort(0,length-1);
		int rightmid = leftmid;
		
		//The problem happens 'coz leftmid will change during the time, and old value of it will not reserve.
		while(leftmid!=0)
		 leftmid = quicksort(0,leftmid-1);
		while(rightmid!=0)
		 rightmid = quicksort(leftmid+1,length-1);
	}*/
	
	public void quicksort(int start, int end){
		//base-case scenario
		
		if(end-start<=0||end<=0) return ;
				
		//general case
		
		int pivot = array[start];
		int i = start+1;
		int j = start+1;
		
		while(j<=end){
			
			if(pivot > array[j]){
				swap(i,j);
				i++;
			}
			j++;
			compTime++;
		}
		
		int partition = i-1;
		swap(start,partition);
	//	partition.add(Integer.valueOf(i-1));
		quicksort(start,partition-1);
	//	while(!partition.isEmpty())
		quicksort(/*partition.pop().intValue()+1*/partition+1,end);
		
	}
	
	public static void swap(int indexA, int indexB){
		int temp = array[indexA];
		array[indexA] = array[indexB];
		array[indexB] = temp;
	}
	
	public static void main(String[] args){
		int[] array = {3,2,8,5,6,4,7,1};
		quickSort qs = new quickSort(array);
		qs.quicksort(0,7);
		
	//	System.out.println(compTime);
		for(int i = 0; i <array.length; i++)
			System.out.println(array[i]);
	}
}
